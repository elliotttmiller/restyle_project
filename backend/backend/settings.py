
# JWT Authentication
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

from datetime import timedelta

# Place SIMPLE_JWT config after SECRET_KEY is defined

"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
import logging
from pathlib import Path
from core.env_handler import load_environment_variables

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load environment variables from .env file
load_environment_variables()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-_)b^sb+*n_na(vlnlln5w6_jm37)3txt4s68boll_5$dry-we#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

# Add this to ensure Django recognizes HTTPS behind Railway's proxy
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Ensure ALLOWED_HOSTS includes the Railway domain and wildcard for testing
ALLOWED_HOSTS = [
    'localhost', '127.0.0.1', '0.0.0.0',
    'restyle-backend.onrender.com', '78de5d736ad9.ngrok-free.app',
    '192.168.0.48', '2b668a86e215.ngrok-free.app',
    'restyleproject-production.up.railway.app',
    '*',  # For testing; remove in production for security
]

# restyle_project/backend/backend/settings.py

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # 3rd Party Apps
    'corsheaders',  # Re-enabled - now installed
    'rest_framework',
    # 'rest_framework_simplejwt',  # Still disabled - install via pip needed
    
    # Our Custom Apps
    'users.apps.UsersConfig',
    'core.apps.CoreConfig',  # Re-enabled core app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Re-enabled - now installed
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # Re-enabled - now installed
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# backend/backend/settings.py

# Check if running in Docker or locally
import os
if os.environ.get('DATABASE_URL'):
    import dj_database_url
    DATABASES = {
        'default': dj_database_url.config(conn_max_age=600, ssl_require=True)
    }
else:
    # Local development - use SQLite
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'  # Re-enabled

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

 # backend/backend/settings.py

# Celery Configuration Options
CELERY_BROKER_URL = os.environ.get('REDIS_URL')
CELERY_RESULT_BACKEND = os.environ.get('REDIS_URL')

# restyle_project/backend/backend/settings.py

AUTH_USER_MODEL = 'users.CustomUser'

# At the very bottom of settings.py
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',  # Disabled due to missing dependency
    ],
}

# backend/backend/local_settings.py
# eBay OAuth Credentials
EBAY_PRODUCTION_APP_ID = os.environ.get('EBAY_PRODUCTION_APP_ID')
EBAY_PRODUCTION_CERT_ID = os.environ.get('EBAY_PRODUCTION_CERT_ID')
EBAY_PRODUCTION_CLIENT_SECRET = os.environ.get('EBAY_PRODUCTION_CLIENT_SECRET')
EBAY_PRODUCTION_REFRESH_TOKEN = os.environ.get('EBAY_PRODUCTION_REFRESH_TOKEN') # Corrected variable name

# CORS CONFIGURATION
CORS_ALLOWED_ORIGINS = ["http://localhost:3000", # The address of our React front-end
    "http://127.0.0.1:3000",
    "http://192.168.0.204:3000",
    "http://192.168.0.204:8000",
    "http://192.168.0.13:8000", # Mobile app IP
    "http://192.168.0.18:8000", 
    "http://192.168.0.22:8000", "http://192.168.0.24:8000", "http://192.168.0.25:8000", "http://192.168.0.33:8000",
    "http://localhost:8081", # Expo development server
    "http://127.0.0.1:8081", # Expo development server
    "exp://localhost:8081", # Expo development server
    "exp://127.0.0.1:8081",
    "http://192.168.0.33:8081",  # Added for Expo Metro
    "http://192.168.0.43:8000", "http://192.168.0.48:8000"]

# Allow all headers and methods for mobile app
CORS_ALLOW_ALL_HEADERS = True
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# For development, allow credentials
CORS_ALLOW_CREDENTIALS = True

# Allow all origins in development (more permissive)
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True

# At the bottom of backend/backend/settings.py

# Google Vision Product Search Configuration
GOOGLE_CLOUD_PROJECT_ID = 'silent-polygon-465403'  # Your Google Cloud Project ID
GOOGLE_VISION_LOCATION = 'us-central1'  # Default location for Vision API
GOOGLE_PRODUCT_SET_ID = 'apparel-products'  # Your Product Set ID (create this in Google Cloud Console)

# Google Cloud Vision Credentials - Using API Key
GOOGLE_API_KEY = os.environ.get('GOOGLE_API_KEY')

try:
    from .local_settings import *
except ImportError:
    pass # No local_settings.py found. This is fine, especially in production.

# Fix: Specify the logging config function as a string, not a dict
LOGGING_CONFIG = 'logging.config.dictConfig'

# Logging configuration for DEBUG level output
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{levelname}] {asctime} {name} {message}',
            'style': '{',
        },
        'simple': {
            'format': '[{levelname}] {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': str(BASE_DIR / 'backend' / 'debug.log'),
            'formatter': 'verbose',
            'mode': 'a',
            'encoding': 'utf-8',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'DEBUG',
    },
    'loggers': {
        'core.ai_service': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'core.crop_preview': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}