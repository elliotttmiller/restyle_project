import os
"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-_)b^sb+*n_na(vlnlln5w6_jm37)3txt4s68boll_5$dry-we#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost',
    '127.0.0.1',
    '192.168.0.204',
    '192.168.0.13',
    '0.0.0.0',
    '192.168.0.18',
    '6012dc93ed69.ngrok-free.app',
    '0b4bbb13fe08.ngrok-free.app',
    'ead6946c7030.ngrok-free.app',
    '192.168.0.22', '192.168.0.24', '192.168.0.25', '192.168.0.33', '192.168.0.43',
    '45cb58a6e1e4.ngrok-free.app',  # Added for current ngrok tunnel
]

# restyle_project/backend/backend/settings.py

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # 3rd Party Apps
    'corsheaders', # <-- ADD HERE
    'rest_framework',
    'rest_framework_simplejwt',
    
    # Our Custom Apps
    'users',
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware', # <-- ADD HERE
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# backend/backend/settings.py

# Check if running in Docker or locally
import os
if os.environ.get('DOCKER_ENV'):
    # Docker environment - use PostgreSQL
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'restyle_db',
            'USER': 'restyle_user',
            'PASSWORD': 'restyle_password',
            'HOST': 'db',  # Use 'db' for Docker containers
            'PORT': '5432',
        }
    }
else:
    # Local development - use SQLite
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

 # backend/backend/settings.py

# Celery Configuration Options
CELERY_BROKER_URL = 'redis://redis:6379/0'
CELERY_RESULT_BACKEND = 'redis://redis:6379/0'

# restyle_project/backend/backend/settings.py

AUTH_USER_MODEL = 'users.CustomUser'

# At the very bottom of settings.py
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}

# backend/backend/local_settings.py
# eBay OAuth Credentials
EBAY_PRODUCTION_APP_ID = os.environ.get('EBAY_PRODUCTION_APP_ID', '***REMOVED***')
EBAY_PRODUCTION_CERT_ID = os.environ.get('EBAY_PRODUCTION_CERT_ID', '***REMOVED***')
EBAY_PRODUCTION_CLIENT_SECRET = os.environ.get('EBAY_PRODUCTION_CLIENT_SECRET', '***REMOVED***')
EBAY_PRODUCTION_REFRESH_TOKEN = os.environ.get('EBAY_PRODUCTION_REFRESH_TOKEN', 'v^1.1#i^1#f^0#p^3#I^3#r^1#t^Ul4xMF83OjY2Qzg4N0NDQTg1MUYxQjNDNUVENTBCN0M5QjVBRTI0XzFfMSNFXjI2MA==')
EBAY_PRODUCTION_USER_TOKEN = os.environ.get('EBAY_PRODUCTION_USER_TOKEN', 'v^1.1#i^1#f^0#p^3#I^3#r^0#t^H4sIAAAAAAAA/+VZW2wcVxn22k6qtLEbCmlQuZlJWwnM7J6Z2ZnZHdkma3tTb+L12rvr2IkE5szMGfvYc8vMGa+3COE4bYNQqr4A7QNRTB8ARUJUvaQRDyC14hJ6SdUHKFUaEEhtJBBSoE2hoMKZXdvZuG1i7wZ1JfZlNf/8t+8//2XOOWBx67bPPzD0wNsdkZtalxfBYmskwt0Ctm3d0t3Z1nrHlhZQwxBZXrxzsX2p7WKPDy3TVfLIdx3bR10Llmn7SoXYywSerTjQx75iQwv5CtGUQio7rPBRoLieQxzNMZmuzGAvI3M6jzhRgJwsSHGBEu1VlUWnlzEklRdhXAKCrIkJHdH3vh+gjO0TaJNehge8yAKZ5fgiSCqcrHDxKMdLh5iuA8jzsWNTlihg+ireKhVZr8bVa3sKfR95hCph+jKpvYVcKjOYHin2xGp09a2EoUAgCfyrnwYcHXUdgGaArm3Gr3ArhUDTkO8zsb6qhauVKqlVZ+pwvxJppGlxnTeSyQQEAqeDGxLKvY5nQXJtP0IK1lmjwqogm2BSvl5EaTTUWaSRlacRqiIz2BX+jQXQxAZGXi+T7k8dHC+k80xXYXTUc+axjvQQKS+LCT7BxzmR6fOQT8ommoJ4xUpV1UqM15kZcGwdhxHzu0Yc0o+oy2h9YEBNYChTzs55KYOE7tTwcdxqADnuULii1SUMyIwdLiqyaBS6Ko/XD/9qPlzJgBuVEXERcoKmG7zMaRyC758RYa1vMiv6woVJjY7GQl+QCsusBb05RFwTaojVaHgDC3lYVwTR4IWEgVhdShpsPGkYrCrqEssZCAGEVFVLJv5vkoMQD6sBQWsJsv5FBWEvU9AcF406JtbKzHqWSrdZSYcFv5eZIcRVYrFSqRQtCVHHm47xAHCxyexwQZtBFmTWePH1mVlcSQyNNmHKr5CyS71ZoHlHjdvTTJ/g6aPQI+UCMk1KWM3aq3zrW0/9AJADJqYRKFITzYVxyPEJ0huCpqN5rKEprDcXMp4X42GtJ0GC5+NUtCGQpjON7SwiM06TwQxbQmawIWy0g0LSXKhquxC/0oWAGKckBYCGwKZcN2NZAYGqiTJNtpaiwEmC2BA8NwiarRCxF2gLmiF7s4210HDwKhgaCnHmkP2eVhrW+oeONZ/em08XhqaKuf3pkYbQ5pFBp/lMMcTabHmaGkvtT9Ffdtjpt2a04rCjHZAOHpSKpHtWPTDhdR/mObF0eBaKpf5hIt9bkLpH9pXyk6IwNqlb3f3WYbeczRkLxVJvb0NBKiDNQ03Wuory4YKFjUxyYhbPjPDjA4KkgTkrnU+Owcm9fkIXciPZNP0UOFRqDHx2utkqPRy5N2bcFt+3xNfUhLX+YYH0qoU5VelCU/SpIaDp6abr1wYvyVpCAlxSBlBXVZBIxGXREA360yVJbXj8NhneNP26dwjJsvnq7okdzQ+yRhLJuiFLPMsjMa6BeGOw3aZb5Rs1lf1w9/a/hBbW+ubhhTp8qgS6OBp+OEQ1x4o5MCAzIWmq4nXXRphiPt39Rav7fao56iGoO7ZZrkd4EzLYnqf7Rccr12NwTXgTMlDTnMAm9ZhbEd2EhBGYBjbN8FCgHoM14ptx04ZmmWDNr8sktsNs8zch4sJyBaCOfTeslw1JUpqFPA1FsV49WKzHWQ9Rg7ByklaP0CZNrrlsOwQbWKvq8APV1zzsbtwLSgtr/Tq66omHT2thU0tXFdiQqRoppCMTz6ONlt1a3KiI09gGHunYQxqZCjzcXFNmZbZOZWm5Io9dN2pZC6vQvhc3BD6MajMezIymCoWJXL6xo5lBNN9sn0sGUiVdlJJsMimJbBzIcTaBBJ0VBFUVUSIhqAl5I5jblyK7PhB30x1IcbLICxyXEPiNruc6Qs0p+HtuP2JXXz32tVR+3FLkGbAU+WlrJAJ6wF3cbvDZrW3j7W3b7/AxoQMCGlEfT9uQBB6KzqGyC7HX+tGWc53D+pGh4bcW1eDpiTe/mGjpqLn5XP4S+Pja3ee2Nu6WmotQ8Mkrb7Zwt+7q4EUgczxIcjIXPwR2X3nbzt3e/rGzX3viE0mG5L77468ff/nU2A9/deSht0DHGlMksqWFLnHLtz7Tdu5F4fj23zHxzmcvdT/3W+XMRD5bGpf1R53Lt53uf+bVz+207v41+PdT21++Pz77bb913/0759xjsyce+cdrP1t+/aXjr+w609ORHn/jse2X737hj5eje4InvV98ZfJTz597c4f7zxM78Gnyh0H1gnTqwdPeX8786Px3/nXsjeeXsx9JffOdS7mh48de/evfn5uLvnjknUfmT6j3nXpYlH/5p+WTjw7KiYtnj3b6J7kLL3zjC97snwunHlqaulj4z76jLZmn3wavn/9ybvmrL+XvvD2N//bp3//k3WxuYP+to9ZrO39+8uj5mx9/5cJvznTs8W7bveP7Z+8RrEs37fleevzZoFsev6tTePfmHzxoPHlfzwWzupb/BVnKsROTHgAA')  # Fallback token if needed 

# CORS CONFIGURATION
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000", # The address of our React front-end
    "http://127.0.0.1:3000",
    "http://192.168.0.204:3000",
    "http://192.168.0.204:8000",
    "http://192.168.0.13:8000", # Mobile app IP
    "http://192.168.0.18:8000", 
    "http://192.168.0.22:8000", "http://192.168.0.24:8000", "http://192.168.0.25:8000", "http://192.168.0.33:8000",
    "http://localhost:8081", # Expo development server
    "http://127.0.0.1:8081", # Expo development server
    "exp://localhost:8081", # Expo development server
    "exp://127.0.0.1:8081",
    "http://192.168.0.33:8081",  # Added for Expo Metro
    "http://192.168.0.43:8000"
]

# Allow all headers and methods for mobile app
CORS_ALLOW_ALL_HEADERS = True
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# For development, allow credentials
CORS_ALLOW_CREDENTIALS = True

# Allow all origins in development (more permissive)
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True

# At the bottom of backend/backend/settings.py

# Google Vision Product Search Configuration
GOOGLE_CLOUD_PROJECT_ID = 'silent-polygon-465403'  # Your Google Cloud Project ID
GOOGLE_VISION_LOCATION = 'us-central1'  # Default location for Vision API
GOOGLE_PRODUCT_SET_ID = 'apparel-products'  # Your Product Set ID (create this in Google Cloud Console)

try:
    from .local_settings import *
except ImportError:
    pass # No local_settings.py found. This is fine, especially in production.

# Fix: Specify the logging config function as a string, not a dict
LOGGING_CONFIG = 'logging.config.dictConfig'

# Logging configuration for DEBUG level output
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{levelname}] {asctime} {name} {message}',
            'style': '{',
        },
        'simple': {
            'format': '[{levelname}] {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': str(BASE_DIR / 'backend' / 'debug.log'),
            'formatter': 'verbose',
            'mode': 'a',
            'encoding': 'utf-8',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'DEBUG',
    },
    'loggers': {
        'core.ai_service': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'core.vertex_ai_service': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'core.crop_preview': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}