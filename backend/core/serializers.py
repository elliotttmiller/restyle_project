# backend/core/serializers.py

from rest_framework import serializers

# ============================================================================== 
# AI-ENHANCED PRICE ANALYSIS SERIALIZERS (FOR THE NEW WORKFLOW)
# These serializers define the structure of the rich JSON response from our
# new MarketAnalysisService. They are not tied to database models.
# ============================================================================== 

class AIIdentifiedAttributesSerializer(serializers.Serializer):
    """Serializes the detailed 'dossier' generated by the AI aggregator."""
    product_name = serializers.CharField(allow_null=True)
    brand = serializers.CharField(allow_null=True)
    category = serializers.CharField(allow_null=True)
    item_condition = serializers.CharField()
    colors = serializers.ListField(child=serializers.CharField(), required=False, default=[])
    market_sentiment_score = serializers.FloatField()
    ai_summary = serializers.CharField()
    confidence_score = serializers.FloatField()
    # This field is retained to allow for future expansion with more complex keywords
    search_keywords = serializers.DictField(required=False, default={})

class StatisticalAnalysisDetailSerializer(serializers.Serializer):
    """Serializes the statistical breakdown for a specific item condition (e.g., 'New' or 'Used')."""
    num_comps = serializers.IntegerField()
    price_range = serializers.ListField(child=serializers.FloatField(), min_length=2, max_length=2)
    weighted_mean_price = serializers.FloatField()
    std_dev = serializers.FloatField()

class StatisticalAnalysisSerializer(serializers.Serializer):
    """Serializes the full statistical analysis, keyed by item condition."""
    by_condition = serializers.DictField(
        child=StatisticalAnalysisDetailSerializer()
    )

class FinalRecommendationSerializer(serializers.Serializer):
    """Serializes the final, user-facing price suggestion and summary."""
    suggested_price = serializers.FloatField()
    suggested_price_range = serializers.ListField(child=serializers.FloatField(), min_length=2, max_length=2)
    summary = serializers.CharField()
    confidence = serializers.CharField()

class AIPriceAnalysisResponseSerializer(serializers.Serializer):
    """
    This is the top-level serializer for the entire response from the
    /api/core/analyze-and-price/ endpoint. It structures the complete output.
    """
    identified_attributes = AIIdentifiedAttributesSerializer()
    market_query_used = serializers.CharField()
    statistical_analysis = StatisticalAnalysisSerializer()
    final_recommendation = FinalRecommendationSerializer()

# NOTE: Your existing model-based serializers (ItemSerializer, etc.) can be added
# below this section if they are used by other, separate CRUD endpoints in your API.
# For the AI analysis workflow, only the serializers above are required.
# File: backend/core/serializers.py

from rest_framework import serializers
from .models import Item, Listing, MarketAnalysis, ComparableSale
import uuid

class ComparableSaleSerializer(serializers.ModelSerializer):
    class Meta:
        model = ComparableSale
        fields = '__all__'

class MarketAnalysisSerializer(serializers.ModelSerializer):
    comps = ComparableSaleSerializer(many=True, read_only=True)
    class Meta:
        model = MarketAnalysis
        fields = [ 'id', 'status', 'suggested_price', 'price_range_low', 
                   'price_range_high', 'confidence_score', 'updated_at', 'comps' ]

class ListingSerializer(serializers.ModelSerializer):
    class Meta:
        model = Listing
        fields = [ 'id', 'platform', 'list_price', 'is_active', 'listing_type', 'duration',
                   'listing_url', 'platform_item_id', 'created_at', 'updated_at' ]

class ItemSerializer(serializers.ModelSerializer):
    owner_username = serializers.ReadOnlyField(source='owner.username')
    analysis = MarketAnalysisSerializer(read_only=True)
    listings = ListingSerializer(many=True, read_only=True)

    class Meta:
        model = Item
        fields = [ 'id', 'owner', 'owner_username', 'title', 'description', 'brand', 
                   'category', 'size', 'color', 'cost_of_goods', 'sku', 
                   'condition', 'is_sold', 'created_at', 'updated_at',
                   'ebay_category_id',
                   'analysis', 'listings' ]
        read_only_fields = ['owner']