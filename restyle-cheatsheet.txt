=========================================================
 Re-Style Project: Command Cheat Sheet
=========================================================
 This file contains the most common and essential commands for running,
 managing, and debugging the application. All Docker commands should be
 run from the project's root directory (restyle_project/).


=========================================================
== 1. Starting the Application
=========================================================
These commands start all the necessary Docker services (backend, celery_worker, db, redis).


--- Start in Background (Normal Use) ---
This is the standard command for starting the application for development.
It runs the containers in the background and frees up your terminal.

> docker-compose up -d


--- Start and Rebuild (After Code Changes) ---
Use this command after you change the Dockerfile or update requirements.txt.
It forces Docker to rebuild your application images with the latest changes.

> docker-compose up --build -d


--- Start in Foreground (For Debugging Crashes) ---
Use this when a container is failing to start. It shows all logs from all
services live in your terminal, allowing you to see the crash report.
Press Ctrl+C to stop all services.

> docker-compose up



=========================================================
== 2. Stopping the Application
=========================================================


--- Stop Containers (Keeps Data) ---
This stops and removes the running containers but preserves your database
volume. Your users, items, and other data will be safe for the next
time you start the app.

> docker-compose down


--- Stop and Delete Everything (Fresh Start) ---
This stops the containers AND deletes the database volume. Use this when
you need a completely clean slate. WARNING: All data will be lost.

> docker-compose down -v



=========================================================
== 3. Checking Status and Logs
=========================================================
These are your primary tools for seeing what the application is doing.


--- Check Container Status ---
This is the first command to run if something seems wrong. It shows which
services are Up, Exited, or (healthy).

> docker-compose ps


--- View Live Logs (Tailing) ---
This streams the logs from a specific service in real-time. It's perfect
for watching background tasks happen. Replace 'celery_worker' with 'backend'
to see the Django server's logs.

> docker-compose logs -f celery_worker


--- View All Past Logs ---
This dumps the entire log history for a specific service. It is essential
for reading the full crash report of a container that has already exited.

> docker-compose logs backend



=========================================================
== 4. Running Django Commands (manage.py)
=========================================================
These commands allow you to interact with your Django application running
inside the 'backend' container.


--- Create a Superuser (Admin Account) ---
Use this to create an administrator for the Django admin panel and for
logging into the app.

> docker-compose exec backend python manage.py createsuperuser


--- Database Migrations ---
Run these commands after you have made changes to your models.py files.

# 1. Create the new migration files
> docker-compose exec backend python manage.py makemigrations

# 2. Apply the migrations to the database
> docker-compose exec backend python manage.py migrate


--- Open the Django Shell ---
This gives you an interactive Python shell inside your Django application
for direct debugging and data manipulation.

> docker-compose exec backend python manage.py shell

(Type exit() and press Enter to leave the shell).



=========================================================
== 5. Frontend Commands (React)
=========================================================
These commands MUST be run from a separate terminal that is navigated
inside the 'frontend' directory.


--- Navigate to the Frontend Directory ---
> cd frontend


--- Start the React Development Server ---
This will start the live-reloading server, usually on http://localhost:3000.

> npm start


--- Install a New Frontend Library ---
Use this to add new packages to your React app (e.g., a charting library).

> npm install name-of-library